import os
from pathlib import Path

import pit.modules.file.api as pitF
import passy.modules.password.api as passyPass
import eras.modules.clear.api as erasC
import whisper.modules.logging.api as whisperLog
import vault.modules.secrets.api as vaultAPI

# -------------------------------
# üåø –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –º–æ–¥—É–ª–µ–π
# -------------------------------
pit_file = pitF.File()
passy_password = passyPass.Password()
eras_clear = erasC.Clear()
whisper_logging = whisperLog.Whisper()
vault = vaultAPI.vault

# -------------------------------
# üß© –û–†–ì–ê–ù–´ NEXUS ‚Äî –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—ë—Ä—Ç–æ–∫
# -------------------------------

class Pit:
    def __init__(self):
        self.delete = pit_file.delete
        self.rename = pit_file.rename
        self.create = pit_file.create


class Passy:
    def __init__(self):
        self.generate = passy_password.generate
        self.check_password = passy_password.check_password
        self.ocenka = passy_password.check_password  # üëà –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ocenka, –∞ –Ω–µ check_password


class Eras:
    def __init__(self):
        self.clear_terminal = eras_clear.clear


class Whisper:
    def __init__(self):
        self.log = whisper_logging.log


# -------------------------------
# üåü NEXUS ‚Äî –≥–ª–∞–≤–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º
# -------------------------------

class Nexus:
    def __init__(self):
        self.passy = Passy()
        self.pit = Pit()
        self.eras = Eras()
        self.whisper = Whisper()

        self.generate_password = self.passy.generate
        self.check_password = self.passy.check_password
        self.create_file = self.pit.create
        self.delete_file = self.pit.delete
        self.rename_file = self.pit.rename
        self.clear_terminal = self.eras.clear_terminal
        self.whisper_log = self.whisper.log

        self.create_note = vault.create_note
        self.open_note = vault.open_note
        self.list_notes = vault.list_notes
        self.delete_note = vault.delete_note

    def start(self):
        print("ü™Ñ NEXUS ‚Äî –≥–æ—Ç–æ–≤. –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã. (–í–≤–µ–¥–∏ 'nexus.app exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
        print("üí° –ü—Ä–∏–º–µ—Ä: pit create file diary txt")
        print()

        while True:
            try:
                cmd = input("NEXUS> ").strip()
                if not cmd:
                    continue

                parts = cmd.lower().split()
                if not parts:
                    continue

                # -------------------------------
                # üõë –í—ã—Ö–æ–¥
                # -------------------------------
                if parts[0] == "nexus.app" and len(parts) >= 2 and parts[1] in ("exit", "stop"):
                    print("üåô NEXUS –≤—ã–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ.")
                    break

                # -------------------------------
                # üìÅ PIT
                # -------------------------------
                elif parts[0] == "pit":
                    if len(parts) < 3:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: pit <action> file <args>")
                        continue
                    action = parts[1]
                    if parts[2] != "file":
                        print("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å 'file' –ø–æ—Å–ª–µ 'pit <action>'.")
                        continue
                    if action == "create" and len(parts) == 5:
                        name, ext = parts[3], parts[4]
                        self.create_file(name, ext)
                        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {name}.{ext}")
                    elif action == "delete" and len(parts) == 4:
                        path = parts[3]
                        self.delete_file(path)
                        print(f"üóëÔ∏è  –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {path}")
                    elif action == "rename" and len(parts) == 5:
                        old, new = parts[3], parts[4]
                        self.rename_file(old, new)
                        print(f"üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {old} ‚Üí {new}")
                    else:
                        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.")

                # -------------------------------
                # üîê PASSY
                # -------------------------------
                elif parts[0] == "passy":
                    if len(parts) < 2:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π: passy <action> ...")
                        continue
                    action = parts[1]
                    if action == "generate" and parts[2] == "password" and len(parts) >= 7:
                        length = int(parts[3])
                        use_lower = parts[4].lower() in ("true", "1", "yes")
                        use_upper = parts[5].lower() in ("true", "1", "yes")
                        use_special = parts[6].lower() in ("true", "1", "yes")
                        pwd = self.generate_password(length, use_lower, use_upper, use_special)
                        print(f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å: {pwd}")
                    elif action == "check" and parts[2] == "password" and len(parts) == 4:
                        pwd = parts[3]
                        score = self.check_password(pwd)
                        print(f"üîí –û—Ü–µ–Ω–∫–∞: {score}/10 ‚Äî {self.passy.ocenka(score)}")
                    else:
                        print("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: passy generate password <len> <a> <A> <s> –∏–ª–∏ passy check password <pwd>")

                # -------------------------------
                # üßπ ERAS
                # -------------------------------
                elif parts[0] == "eras":
                    if len(parts) >= 3 and parts[1] == "clear" and parts[2] == "terminal":
                        self.clear_terminal()
                        print("üßπ –¢–µ—Ä–º–∏–Ω–∞–ª –æ—á–∏—â–µ–Ω.")

                # -------------------------------
                # üí¨ WHISPER
                # -------------------------------
                elif parts[0] == "whisper":
                    message = " ".join(parts[1:])
                    if not message:
                        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π: whisper <—Ç–µ–∫—Å—Ç>")
                        continue
                    success = self.whisper_log(message)
                    if success:
                        print("üìù –ó–∞–ø–∏—Å–∞–Ω–æ –≤ .nexus/whisper.log")
                    else:
                        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å (–ø—Ä–∞–≤–∞? –ø—É—Ç—å?)")

                # -------------------------------
                # üîí VAULT ‚Äî –ó–ê–ú–ï–¢–ö–ò –ü–û –ü–ê–†–û–õ–Æ
                # -------------------------------
                elif parts[0] == "vault":
                    if len(parts) < 2:
                        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π: vault create/open/list/delete <–∞—Ä–≥—É–º–µ–Ω—Ç—ã>")
                        continue

                    action = parts[1]

                    if action == "create" and len(parts) >= 4:
                        password = parts[2]
                        note_content = " ".join(parts[3:])
                        note_id = self.create_note(password, note_content)
                        print(f"üîí –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. ID: {note_id}")
                        print("üíæ –°–æ—Ö—Ä–∞–Ω–∏ —ç—Ç–æ—Ç ID ‚Äî –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.")

                    elif action == "open" and len(parts) == 4:
                        note_id = parts[2]
                        password = parts[3]
                        content = self.open_note(note_id, password)
                        if content is not None:
                            print(f"üîì –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ #{note_id}:")
                            print(content)
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                    elif action == "list":
                        ids = self.list_notes()
                        if ids:
                            print("üîë –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ (ID):")
                            for note_id in ids:
                                print(f"  ‚Ä¢ {note_id}")
                        else:
                            print("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫.")

                    elif action == "delete" and len(parts) == 4:
                        note_id = parts[2]
                        password = parts[3]
                        if self.delete_note(note_id, password):
                            print(f"üóëÔ∏è  –ó–∞–º–µ—Ç–∫–∞ {note_id} —É–¥–∞–ª–µ–Ω–∞.")
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

                    else:
                        print("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: vault create <–ø–∞—Ä–æ–ª—å> <—Ç–µ–∫—Å—Ç> | open <id> <–ø–∞—Ä–æ–ª—å> | list | delete <id> <–ø–∞—Ä–æ–ª—å>")

                # -------------------------------
                # ü§ù –°–í–Ø–ó–¨: AUTO-TAGGING –° –ü–ê–†–û–õ–ï–ú –ß–ï–†–ï–ó VAULT
                # -------------------------------
                elif parts[0] == "passy" and parts[1] == "save" and parts[2] == "password":
                    if len(parts) != 4:
                        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π: passy save password <name>")
                        continue
                    name = parts[3]
                    pwd = self.generate_password(24, True, True, True)
                    vault.create_note(name, pwd)  # üëà –ü–†–Ø–ú–û –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–ê–£–õ–¢ ‚Äî –±–µ–∑ –ø—Ä–æ–∫—Å–∏!
                    print(f"üîê –ü–∞—Ä–æ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ vault –ø–æ–¥ –∏–º–µ–Ω–µ–º '{name}': {pwd}")

                # -------------------------------
                # ü§ù –°–í–Ø–ó–¨: –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø –ò–ó VAULT –í –ü–ò–¢
                # -------------------------------
                elif parts[0] == "pit" and parts[1] == "create" and parts[2] == "secret" and len(parts) == 4:
                    name = parts[3]
                    content = vault.open_note(name, name)  # üëà –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ –∏–º–µ–Ω–∏ –∫–∞–∫ –ø–∞—Ä–æ–ª—é
                    if content is not None:
                        filename = f"{name}.txt"
                        with open(filename, "w", encoding="utf-8") as f:
                            f.write(content)
                        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {filename} —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏–∑ vault/{name}")
                    else:
                        print(f"‚ùì –ü–∞—Ä–æ–ª—å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ vault.")

                # -------------------------------
                # ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                # -------------------------------
                else:
                    print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: pit, passy, eras, whisper, vault, nexus.app")

            except KeyboardInterrupt:
                print("\nüåô NEXUS –≤—ã–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ.")
                break
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {e}")